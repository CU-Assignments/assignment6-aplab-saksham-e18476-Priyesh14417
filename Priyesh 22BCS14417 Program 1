/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) {
            return null;
        }
        return constructBST(nums, 0, nums.length - 1);
    }
  
    private TreeNode constructBST(int[] nums, int left, int right) {
        if (left > right) {
            return null;
        }
      
        int mid = left + (right - left) / 2;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = constructBST(nums, left, mid - 1);
        node.right = constructBST(nums, mid + 1, right);
      
        return node;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
      
        int[] nums1 = {-10, -3, 0, 5, 9};
        TreeNode bst1 = sol.sortedArrayToBST(nums1);
        System.out.println("Example 1: " + bst1.val); 
      
        int[] nums2 = {0, 1, 2, 3, 4, 5, 6};
        TreeNode bst2 = sol.sortedArrayToBST(nums2);
        System.out.println("Example 2: " + bst2.val); 
    }
}
